{"version":3,"sources":["reports.js","users.js","authProvider.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["ReportList","props","List","Datagrid","rowClick","TextField","source","EditButton","ReportEdit","Edit","SimpleForm","TextInput","ReportCreate","Create","UserList","label","EmailField","UrlField","UserEdit","UserCreate","type","params","AUTH_LOGIN","username","localStorage","setItem","Promise","resolve","AUTH_LOGOUT","removeItem","AUTH_ERROR","status","reject","AUTH_CHECK","getItem","Card","CardHeader","title","CardContent","dataProvider","jsonServerProvider","App","Admin","dashboard","Dashboard","authProvider","Resource","name","list","edit","create","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d00a87d2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SimpleList, List, Edit, Create, Datagrid, ReferenceField, TextField, EditButton, DisabledInput, LongTextInput, ReferenceInput, SelectInput, SimpleForm, TextInput } from 'react-admin';\r\n\r\nexport const ReportList = (props) => (\r\n    <List {...props}>\r\n          <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n       {/*   <ReferenceField label=\"User\" source=\"user\" reference=\"users\"/> */}\r\n            <TextField source=\"user:\" />\r\n            <TextField source=\"pH:\" />\r\n            <TextField source=\"Hardness:\" />\r\n            <TextField source=\"TDS:\" />\r\n            <TextField source=\"Company Address:\" />\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\n//const ReportTitle = ({ record }) => {\r\n  //  return <span>Report {record ? `\"${record.title}\"` : ''}</span>;\r\n//};\r\n\r\nexport const ReportEdit = (props) => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n           {/* <DisabledInput source=\"id\" />*/}\r\n           <TextField source=\"id\" />\r\n       {/*    <ReferenceInput label=\"User\" source=\"username\" reference=\"users\"> \r\n                <SelectInput optionText=\"name\" />\r\n</ReferenceInput> */}\r\n             <TextField source=\"user:\" />\r\n            <TextInput source=\"pH:\" />\r\n            <TextInput source=\"Hardness:\" />\r\n            <TextInput source=\"TDS:\" />\r\n            <TextInput source=\"Company Address:\" />\r\n           \r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const ReportCreate = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n        <TextField source=\"id\" />\r\n       {/*      <ReferenceInput label=\"User\" source=\"username\" reference=\"users\">\r\n                <SelectInput optionText=\"name\" />\r\n</ReferenceInput> */}\r\n            <TextField source=\"user:\" />\r\n             <TextInput source=\"pH:\" />\r\n            <TextInput source=\"Hardness:\" />\r\n            <TextInput source=\"TDS:\" />\r\n            <TextInput source=\"Company Address:\" />\r\n        {/*    <LongTextInput source=\"body\" />*/}\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React, { Component } from 'react';\r\nimport {\r\n  List,\r\n  Datagrid,\r\n  TextField,\r\n  EmailField,\r\n  UrlField,\r\n  Edit,\r\n  SimpleForm,\r\n  TextInput,\r\n  DisabledInput,\r\n  Create,\r\n  EditButton\r\n} from 'react-admin';\r\n\r\n\r\nexport const UserList = props => (\r\n    <List {...props}>\r\n      <Datagrid rowClick=\"edit\">\r\n        <TextField source=\"id\" />\r\n        <TextField source=\"type\" label=\"Type\" />\r\n        <TextField source=\"company.name\" label=\"Company\" />\r\n        {/*<TextField source=\"name\" />*/}\r\n        <TextField source=\"username\" />\r\n        <EmailField source=\"email\" />\r\n        <TextField source=\"address.street\" label=\"Address\" />\r\n        <TextField source=\"phone\" />\r\n        <UrlField source=\"website\" />\r\n        <EditButton />\r\n               \r\n      </Datagrid>\r\n    </List>\r\n  );\r\n\r\nexport const UserEdit = props => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n     {/* <DisabledInput source=\"id\" /> */}\r\n     <TextField source=\"id\" />\r\n     <TextField source=\"type\" label=\"Type\" />\r\n        <TextField source=\"company.name\" label=\"Company\" />\r\n{/*<TextField source=\"name\" />*/}\r\n      <TextInput source=\"username\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"address.street\" label=\"Address\" />\r\n      <TextInput source=\"phone\" />\r\n      <TextInput source=\"website\" />\r\n          </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const UserCreate = props => (\r\n   \r\n   \r\n    <Create {...props}>\r\n      <SimpleForm>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"type\" label=\"Type\" />\r\n        <TextField source=\"company.name\" label=\"Company\" />\r\n     {/*<TextField source=\"name\" />*/}\r\n        <TextInput source=\"username\" />\r\n        <TextInput source=\"email\" />\r\n        <TextInput source=\"address.street\" label=\"Address\" />\r\n        <TextInput source=\"phone\" />\r\n        <TextInput source=\"website\" />\r\n        \r\n      </SimpleForm>\r\n    </Create>\r\n  );","import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\r\n\r\nexport default (type, params) => {\r\n    // called when the user attempts to log in\r\n    if (type === AUTH_LOGIN) {\r\n        const { username } = params;\r\n        localStorage.setItem('username', username);\r\n        // accept all username/password combinations\r\n        return Promise.resolve();\r\n    }\r\n    // called when the user clicks on the logout button\r\n    if (type === AUTH_LOGOUT) {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    }\r\n    // called when the API returns an error\r\n    if (type === AUTH_ERROR) {\r\n        const { status } = params;\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    // called when the user navigates to a new location\r\n    if (type === AUTH_CHECK) {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    }\r\n    return Promise.reject('Unknown method');\r\n};","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\n\r\nexport default () => (\r\n    <Card>\r\n        <CardHeader title=\"Welcome to the administration\" />\r\n        <CardContent>Lorem ipsum sic dolor amet...</CardContent>\r\n    </Card>\r\n);","import React,  { Component } from 'react';\nimport { Admin, Resource } from 'react-admin';\n\nimport jsonServerProvider from 'ra-data-json-server';\nimport {ReportList, ReportEdit, ReportCreate } from './reports';\nimport {UserList, UserEdit, UserCreate } from './users';\n//import {PostList, PostEdit, PostCreate } from './posts';\nimport authProvider from './authProvider';\nimport Dashboard from './Dashboard';\n//import jsonServerProvider from 'ra-data-json-server';\n\n//const dataProvider = jsonServerProvider('http://jsonplaceholder.typicode.com');\nconst dataProvider = jsonServerProvider('https://my-json-server.typicode.com/coursewarefactory/lab');\n//const dataProvider = jsonServerProvider('http://localhost:3000');\n\n\nclass App extends Component {\n    render() {\n      return (\n       \n\n\n//const App = () => (\n<Admin dashboard={Dashboard} authProvider={authProvider} dataProvider={dataProvider}>\n{/*<Resource name=\"posts\" list={PostList} edit={PostEdit} create={PostCreate} />*/}\n<Resource name=\"reports\" list={ReportList} edit={ReportEdit} create={ReportCreate} />\n<Resource name=\"users\"   list={UserList}   edit={UserEdit}   create={UserCreate} />\n\n  </Admin>\n       );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}